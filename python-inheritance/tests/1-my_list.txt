============================================
Comment utiliser 1-my_list.txt
============================================

Cette bibliothèque est très simple, car elle ne contient qu'une seule fonction appelée
``print_sorted()``.

Nombres :
========
``print_sorted()`` renvoie la liste triée.
:: avec des entiers positifs
   >>> MyList = __import__('1-my_list').MyList
   >>> my_list = MyList()
   >>> isinstance(my_list, list)
   True
   >>> my_list.print_sorted()
   []

:: en ajoutant des éléments à la liste
   >>> my_list.append(7)
   >>> my_list.append(3)
   >>> my_list.append(1)
   >>> my_list.print_sorted()
   [1, 3, 7]

:: avec des valeurs égales à zéro
   >>> my_list.append(0)
   >>> my_list.print_sorted()
   [0, 1, 3, 7]

:: avec un entier infini
   >>> my_list.append(int('inf'))
   Traceback (most recent call last):
   ValueError: invalid literal for int() with base 10: 'inf'

:: avec des valeurs négatives
   >>> my_list.append(-15)
   >>> my_list.print_sorted()
   [-15, 0, 1, 3, 7]

:: lorsqu’un élément est répété
   >>> my_list.append(-15)
   >>> my_list.append(0)
   >>> my_list.append(7)
   >>> my_list.print_sorted()
   [-15, -15, 0, 0, 1, 3, 7, 7]

:: lorsque tous les éléments de la liste sont identiques
   >>> my_list.clear()
   >>> my_list.append(5)
   >>> my_list.append(5)
   >>> my_list.append(5)
   >>> my_list.append(5)
   >>> my_list.append(5)
   >>> my_list.print_sorted()
   [5, 5, 5, 5, 5]

:: avec un entier très grand
   >>> my_list.append(10000000000000000000000000000000000000000000)
   >>> my_list.print_sorted()
   [5, 5, 5, 5, 5, 10000000000000000000000000000000000000000000]

:: avec une valeur None
   >>> my_list.append(None)
   >>> my_list.print_sorted()
   Traceback (most recent call last):
   TypeError: unorderable types: NoneType() < int()

:: avec une valeur NULL
   >>> my_list.append(NULL)
   Traceback (most recent call last):
   NameError: name 'NULL' is not defined
